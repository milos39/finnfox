@model IEnumerable<finnfox.RacunovodstvenaPromena>

@{
    ViewBag.Title = "Index";
}

<div ng-app="racunovodstvenePromene">
    <div id="ctrl-wrapper" ng-controller="racunovodstvenePromeneController">
        <h2 id="godina-naslov">Kompletna finansijska istorija</h2>
        @Html.ActionLink("+ Kreiraj novu promenu", "Create", "RacunovodstvenaPromenas", null, htmlAttributes: new { @class = "btn btn-primary" })

        @*<button class="btn btn-primary" id="updateTable">
            update table
        </button>
        <input type="number" id="godinaTest" />
        <p id="nizDemo"></p>*@

        <div class="dropdown">
            <button class="btn btn-default dropdown-toggle" type="button" id="godineUsistemu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                godine
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" aria-labelledby="godineUsistemu" id="godine-dropdown">
                <li ng-repeat="godina in promenePoGodini.godine"><a class="{{godina}}" href="#">{{godina}}</a></li>
                <li><a class="0" href="#">sve godine</a></li>
            </ul>
        </div>

        <div class="dropdown">
            <button class="btn btn-default dropdown-toggle" type="button" id="meseciUsistemu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                meseci
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" aria-labelledby="meseciUsistemu" id="meseci-dropdown">
                <li ng-repeat="mesec in meseciZaDatuGodinu"><a class="{{mesec}}" href="#">{{mesec}}</a></li>
                <li><a class="0" href="#">svi meseci</a></li>
            </ul>
        </div>

        <table id="promeneTabela"
               data-search="true"
               data-show-columns="true"
               locale="hr-HR">
            <thead>
                <tr>
                    <th data-field="DatumPromene">datum</th>
                    <th data-field="TipRacunovodstvenePromene">tip promene</th>
                    <th data-field="NazivPromene">naziv promene</th>
                    <th data-field="KolicinaNovca">vrednost</th>
                </tr>
            </thead>
            @*<tbody>
                <tr ng-repeat="promena in promenePoGodini.racunovodstvenePromene">
                    <td>{{promena.DatumPromene}}</td>
                    <td>{{promena.TipRacunovodstvenePromene}}</td>
                    <td>{{promena.NazivPromene}}</td>
                    <td>{{promena.KolicinaNovca}}</td>
                </tr>
            </tbody>*@

        </table>

        <div class="row">
            <div class="col-md-4 col-md-offset-4">
                <canvas id="myChart" width="200" height="200"></canvas>
            </div>

        </div>














        @*<table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ApplicationUser.UserLastName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TipRacunovodstvenePromene.NazivTipa)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.NazivPromene)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DatumPromene.Date)
                </th>
                <th></th>
            </tr>



        @foreach (var item in Model) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ApplicationUser.UserLastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TipRacunovodstvenePromene.NazivTipa)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NazivPromene)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DatumPromene.Date)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id=item.PromenaId }) |
                    @Html.ActionLink("Details", "Details", new { id=item.PromenaId }) |
                    @Html.ActionLink("Delete", "Delete", new { id=item.PromenaId })
                </td>
            </tr>

        }

        </table>*@
    </div>
</div>

@section Scripts {

<script>
    var myChart;
    function addData(chart, label, data) {
        chart.data.labels = label;
        chart.data.datasets[0].data = data;
        chart.update();
    };

    function removeData(chart) {
        chart.data.labels = [];
        chart.data.datasets.forEach((dataset) => {
            dataset.data = [];
        });
        chart.update();
    };

    function drawChart(data) {
        var chartType;
        if (data.nasloviSaProcentima[0].startsWith("ušteda - ")) {
            chartType = "doughnut";
        } else {
            chartType = "bar";
        }
        var ctx = document.getElementById('myChart');

        myChart = new Chart(ctx, {
            type: chartType,
            data: {
                labels: data.nasloviSaProcentima,
                datasets: [{
                    label: 'Udeo troškova u ukupnim primanjima',
                    data: data.kolicineNovcaPoTipu,
                    backgroundColor: [
                        '#0060df',
                        '#ff9f40',
                        '#ff6384',
                        '#4bc0c0',
                        '#ffe900',
                        '#ff0039',
                        '#a1ff66'
                    ]
                }]
            },
            options: {

            }
        });
    };


    function drawOrUpdateChart(godina, mesec) {
        if (mesec === undefined) {
            $.get("http://localhost:1091/RacunovodstvenaPromenas/godinaChart?godina=" + godina, function (data, status) {
            console.log(data);

            if ($("#myChart").hasClass("chartjs-render-monitor")) {
                myChart.destroy();
            }
            drawChart(data);
        });
        } else {
            $.get("http://localhost:1091/RacunovodstvenaPromenas/godinaMesecChart?godina=" + godina + "&mesec=" + mesec, function (data, status) {
            console.log(data);

            if ($("#myChart").hasClass("chartjs-render-monitor")) {
                myChart.destroy();
            }
            drawChart(data);
        });
        };
            
        
    };

    //var niz = ["papaja_", "banana_", "mango_", "kivi_"];
    //$("#nizDemo").html(niz);
    //$("#updateTable").click(function () {
    //    niz.splice($("#godinaTest").val(), 1);
    //    $("#nizDemo").html(niz);
            
            
    //});


        //$("#promeneTabela").bootstrapTable({
        //data-toggle: "table"
        //locale: "hr-HR",
        //data-search: "true",
        //data-show-columns: "true"
        //});
        //$("#promeneTabela").bootstrapTable({});
    
</script>


@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/angular")
@Scripts.Render("~/bundles/bs-table")
@Scripts.Render("~/bundles/chart")


@*<script>
var ctx = document.getElementById('myChart');
    var myChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
            datasets: [{
                label: 'Udeo troškova u ukupnim primanjima',
                data: [12, 19, 3, 5, 2, 3],
                backgroundColor: [
                    '#0060df',
                    '#ff9f40',
                    '#ff6384',
                    '#4bc0c0',
                    '#ffe900',
                    '#ff0039'
                ]
            }]
        },
        options: {
        }
    });
</script>*@

}

